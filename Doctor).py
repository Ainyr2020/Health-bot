import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

API_TOKEN = '7538752864:AAEoLSgAtDdP_4vXI3gS2Zu1CXYtyz8D_Wo'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    gender = State()
    age = State()
    analysis = State()

# /start
@router.message(lambda message: message.text == "/start")
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üß™ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")]],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å, –≤ –Ω–æ—Ä–º–µ –ª–∏ —Ç–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb
    )

# –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
@router.message(lambda msg: msg.text == "üß™ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_analysis(message: types.Message, state: FSMContext):
    await state.set_state(Form.gender)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º—É–∂ / –∂–µ–Ω):", reply_markup=ReplyKeyboardRemove())

# –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
@router.message(Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂", "–∂–µ–Ω"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ '–º—É–∂' –∏–ª–∏ '–∂–µ–Ω'.")
    await state.update_data(gender=gender)
    await state.set_state(Form.age)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

# –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
@router.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    await state.update_data(age=int(message.text))
    await state.set_state(Form.analysis)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–≥–µ–º–æ–≥–ª–æ–±–∏–Ω: 115\n–∂–µ–ª–µ–∑–æ: 8.5\n—Å–∞—Ö–∞—Ä: 6.5"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
@router.message(Form.analysis)
async def process_analysis(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    gender = user_data['gender']

    lines = message.text.lower().splitlines()
    results = []
    notes = []

    for line in lines:
        if ":" not in line:
            continue
        key, val = map(str.strip, line.split(":", 1))
        if key in ["–≥–µ–º–æ–≥–ª–æ–±–∏–Ω", "–∂–µ–ª–µ–∑–æ", "—Å–∞—Ö–∞—Ä"]:
            try:
                value = float(val.replace(',', '.'))
            except ValueError:
                continue

            if key == "–≥–µ–º–æ–≥–ª–æ–±–∏–Ω":
                norm = (130, 170) if gender == "–º—É–∂" else (120, 150)
            elif key == "–∂–µ–ª–µ–∑–æ":
                norm = (10.7, 30.4)
            elif key == "—Å–∞—Ö–∞—Ä":
                norm = (4.1, 6.1)

            low, high = norm
            if value < low:
                results.append(f"üîª {key.capitalize()}: {value} ‚Äî –ü–æ–Ω–∏–∂–µ–Ω")
                notes.append(f"üí° {key.capitalize()} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π. –°–ª–µ–¥—É–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å {key}.")
            elif value > high:
                results.append(f"üî∫ {key.capitalize()}: {value} ‚Äî –ü–æ–≤—ã—à–µ–Ω")
                notes.append(f"üí° {key.capitalize()} –ø–æ–≤—ã—à–µ–Ω. –ù—É–∂–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º.")
            else:
                results.append(f"‚úÖ {key.capitalize()}: {value} ‚Äî –í –Ω–æ—Ä–º–µ")

    response = "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:*\n\n" + "\n".join(results)
    if notes:
        response += "\n\nüîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n" + "\n".join(notes)

    await message.answer(response, parse_mode="Markdown")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
